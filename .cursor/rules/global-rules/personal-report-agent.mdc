---
description: 
globs: 
alwaysApply: false
---
# Personal Report Standards

## Critical Rules

- Reports MUST follow the exact three-section structure:
  1. T·ªïng Quan Ti·∫øn ƒê·ªô (Progress Overview)
  2. B√°o C√°o Ho·∫°t ƒê·ªông G·∫ßn Nh·∫•t (Recent Activities)
  3. Danh S√°ch Nhi·ªám V·ª• (Task List)

- Progress Overview section MUST include:
  - Overall project progress percentage
  - Mermaid pie chart showing task distribution
  - Clear notes about chart updates

- Recent Activities section MUST use the following structure:
  - ‚ú® Th√†nh t·ª±u (Achievements)
    - Bullet points for completed items
    - Focus on impact and value delivered
  - üöß ƒêang th·ª±c hi·ªán (In Progress)
    - Current tasks with expected completion dates
    - Clear, actionable items
  - ‚ö†Ô∏è V·∫•n ƒë·ªÅ v√† Gi·∫£i ph√°p (Issues and Solutions)
    - Problem statement followed by solution approach
    - Keep it concise and actionable

- Task List section MUST include:
  - Feature/Task ID and name
  - Status using standard emojis (‚úÖ üîÑ ‚è≥)
  - Expected completion date
  - Relevant notes
  
### Breaking Rules for Feature Implementation
1. **UI Development Requirements**
   - Every feature MUST have a "UI Development" task if it includes user interface
   - MUST include "Mobile Responsive" as a separate task
   - UI tasks MUST be reviewed against design system standards
   - MUST include accessibility considerations

2. **Backend Development Requirements**
   - MUST have "Backend APIs" task for features requiring server interaction
   - API documentation MUST be included in the task
   - MUST follow RESTful or GraphQL standards as per project requirements
   - MUST include API versioning strategy

3. **Database Design Requirements**
   - MUST have "Database Design" task for features requiring data persistence
   - MUST be reviewed by dev-lead or senior developer
   - MUST include entity relationship diagrams
   - MUST consider data migration strategy
   - MUST document any schema changes

4. **Error Handling Requirements**
   - MUST have "Error Handling" task
   - MUST cover all abnormal cases
   - MUST implement proper error logging
   - MUST provide user-friendly error messages
   - MUST handle network errors and timeouts
   - MUST implement proper validation
   - MUST handle edge cases

5. **Testing Requirements**
   - MUST have "Unit Tests" task
   - MUST achieve >90% code coverage
   - MUST include integration tests where applicable
   - MUST include performance tests for critical paths
   - MUST document test cases

### Progress Tracking Rules
1. **Status Tracking**
   - MUST use the following status columns:
     - Todo
     - Committed
     - Merged
     - Tested
     - Demo
     - Delivered
     - Mainnet

2. **Timeline Management**
   - All in-progress tasks MUST have expected completion dates
   - Dates MUST be in DD/MM/YYYY format
   - Any timeline changes MUST be documented with reasons

3. **Progress Reporting**
   - MUST update progress percentage based on completed tasks
   - MUST document achievements in current period
   - MUST list ongoing tasks with completion dates
   - MUST document blockers and solutions

## Examples

<example>
### Good Feature Implementation
| Feature | Todo | Committed | Merged | Tested | Demo | Delivered | Mainnet | Due Date |
|---------|:----:|:---------:|:------:|:------:|:----:|:---------:|:-------:|----------|
| **FR-001 - User Authentication** |  |  |  |  |  |  |  | 15/07/2025 |
| - UI Development |  | ‚úì | ‚úì | ‚úì |  |  |  | 10/07/2025 |
| - Mobile Responsive |  | ‚úì | ‚úì | ‚úì |  |  |  | 10/07/2025 |
| - Backend APIs |  | ‚úì | ‚úì | ‚úì |  |  |  | 12/07/2025 |
| - Database Design (Review) | ‚úì | ‚úì | ‚úì | ‚úì |  |  |  | 08/07/2025 |
| - Error Handling |  | ‚úì | ‚úì | ‚úì |  |  |  | 13/07/2025 |
| - Unit Tests (>90%) |  | ‚úì | ‚úì | ‚úì |  |  |  | 14/07/2025 |

### Good Progress Report
üöß ƒêang th·ª±c hi·ªán:
- Implementing user authentication UI components
- Expected completion: 10/07/2025
- Setting up API endpoints for authentication
- Expected completion: 12/07/2025
</example>

<example type="invalid">
### Poor Feature Implementation
| Feature | Status | Due Date |
|---------|--------|----------|
| User Authentication | In Progress | July 2025 |

### Poor Progress Report
üöß ƒêang th·ª±c hi·ªán:
- Working on authentication
- Will be done soon
</example>

## Best Practices

1. **Task Breakdown**
   - Break down features into manageable tasks
   - Each task should be completable within 1-2 days
   - Include clear acceptance criteria
   - Define dependencies between tasks

2. **Progress Tracking**
   - Update status daily
   - Include specific metrics where possible
   - Document blockers immediately
   - Keep timeline estimates realistic

3. **Quality Control**
   - Review all deliverables against requirements
   - Document test results
   - Include performance metrics
   - Track technical debt

4. **Communication**
   - Use clear, concise language
   - Include relevant screenshots/diagrams
   - Highlight risks early
   - Document decisions and their rationale
