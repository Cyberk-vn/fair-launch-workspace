---
description: 
globs: 
- apps/bankr-fe/**/*.tsx
- apps/bankr-fe/**/*.ts
- apps/clanker-fe/**/*.tsx
- apps/clanker-fe/**/*.ts
alwaysApply: false
---

# Next.js Frontend Development Standards

## Critical Rules

1.  `MUST use react-hook-form for all form handling.`
2.  `MUST use Zustand for global state management.`
3.  `MUST use export default for Page components (e.g., app/some-route/page.tsx) and named exports for other Components.`
4.  `MUST use arrow functions for all component and function definitions.`
5.  `MUST define explicit TypeScript types/interfaces for all functions and props.`
6.  `MUST keep components as pure functions whenever possible.`
7.  `MUST use composition pattern to minimize props drilling.`
8.  `MUST effectively separate concerns (e.g., Server Components for data fetching/logic, Client Components for interactivity and UI presentation, styled with TailwindCSS/Shadcn).`
9.  `MUST limit Client Components to only manage their own state or state relevant to client-side interactivity.`
10. `MUST pass actions to Client Components through props as callbacks, or utilize Server Actions for form submissions/mutations from Server Components.`
11. `MUST confirm component structure and interaction patterns (Server/Client) with YOU (the user) before implementation.`
12. `MUST use TailwindCSS for styling.`
13. `MUST use Shadcn components for UI elements where appropriate.`
14. `MUST extract complex client-side logic into custom React hooks.`
15. `MUST use @tanstack/react-query for client-side data fetching, caching, and mutations when Server Components are not sufficient or for managing complex client state tied to server data.`
16. `MUST implement selectors when accessing specific fields from @tanstack/react-query results if it improves performance or readability.`
17. `MUST handle business logic primarily in Server Components or Route Handlers; Client Components should focus on UI and user interaction.`
18. `MUST create layout wrapper components (potentially Server Components) to handle positioning, padding, margin, and consistent page structures (e.g., using layout.tsx).`
19. `MUST create computed variables for all derived values rather than calculating in JSX, both in Server and Client Components.`
20. `MUST organize custom hooks in hooks/{feature} within each app's directory (e.g., apps/bankr-fe/hooks/auth, apps/clanker-fe/hooks/profile).`
21. `MUST leverage Next.js App Router for new features and page structures.`
22. `MUST use Server Components for data fetching and logic that can run on the server, reserving Client Components for interactivity ('use client' directive).`
23. `MUST utilize Route Handlers (e.g., app/api/[...]/route.ts) for API endpoint creation.`
24. `MUST use dynamic imports (next/dynamic) for Client Components or libraries that are large or not immediately needed to improve initial load time.`
25. `MUST optimize images using the next/image component for automatic optimization, resizing, and serving in modern formats.`
26. `MUST use next/link for client-side navigation between pages instead of traditional <a> tags.`
27. `MUST define metadata (title, description, etc.) using the Metadata API (e.g., generateMetadata function or static metadata object in layout.tsx or page.tsx).`
28. `MUST follow Next.js conventions for special files (layout.tsx, page.tsx, loading.tsx, error.tsx, template.tsx, route.ts) within the App Router.`
29. `MUST ensure environment variables are prefixed with NEXT_PUBLIC_ for client-side exposure and accessed appropriately (e.g., process.env.NEXT_PUBLIC_VAR_NAME).`
30. `MUST use Server Actions for form submissions and data mutations directly from Server or Client Components when appropriate and secure, simplifying client-side logic.`

## Component Structure Guidelines

### Page Components (App Router)

**File: `apps/bankr-fe/app/example/page.tsx`**
```tsx
// File: apps/bankr-fe/app/example/page.tsx

import { SomeClientComponent } from '@/components/SomeClientComponent';
import { CardWrapper } from '@/components/ui/wrappers/CardWrapper';
// Assuming you have a LoadingIndicator component at @/components/ui/LoadingIndicator
// import { LoadingIndicator } from '@/components/ui/LoadingIndicator';

// Define the type for a fetched item
interface ExampleDataItem {
  id: string;
  name: string;
  isActive: boolean;
  // ... other properties
}

// Define the type for the fetch result
interface ExampleData {
  items: ExampleDataItem[];
  // ... other properties
}

// Mock function for asynchronous data fetching
async function fetchExampleData(): Promise<ExampleData> {
  // In a real application, this would be an API call or database query
  console.log('Fetching example data on the server...');
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve({
        items: [
          { id: '1', name: 'Product A', isActive: true },
          { id: '2', name: 'Product B', isActive: false },
          { id: '3', name: 'Product C', isActive: true },
        ],
      });
    }, 500) // Simulate network delay
  );
}

// Props for the Page component, can include params and searchParams
interface ExamplePageProps {
  // params: { slug: string }; // Example if route is app/example/[slug]/page.tsx
  searchParams: { [key: string]: string | string[] | undefined };
}

// This is a Server Component by default in the App Router
export default async function ExamplePage({ searchParams }: ExamplePageProps) {
  // Fetch data directly in the Server Component
  const data = await fetchExampleData();

  // Process and compute data (Rule 19)
  const processedItems = data.items.filter(item => item.isActive);
  const hasProcessedItems = processedItems.length > 0;

  // Define a Server Action (Rule 30)
  async function handleItemAction(itemId: string) {
    'use server'; // Mark as a Server Action
    console.log(`Server Action: Action for item ${itemId} executed on the server.`);
    // Example: await database.updateItemStatus(itemId, 'processed');
    // revalidatePath('/example'); // Revalidate data on the page if needed
  }

  return (
    <CardWrapper className="mt-4"> {/* Example class from CardWrapper sample */}
      {/* Loading state is typically handled by a loading.tsx file in the same directory */}
      {/* or using <Suspense> if child components fetch their own data */}
      <h1 className="text-2xl font-bold mb-4">Example Page (App Router)</h1>
      <SomeClientComponent
        items={processedItems}
        hasItems={hasProcessedItems}
        onItemAction={handleItemAction} // Pass Server Action to Client Component
      />
    </CardWrapper>
  );
}

// Convention for declaring page metadata (Rule 27)
export async function generateMetadata({ searchParams }: ExamplePageProps) {
  // Data can be fetched here if metadata depends on it
  return {
    title: 'Example Page - BankR',
    description: 'This is an example page demonstrating Next.js App Router concepts.',
  };
}
```

**File: `apps/bankr-fe/components/SomeClientComponent.tsx`**
```tsx
// File: apps/bankr-fe/components/SomeClientComponent.tsx
'use client'; // Mark as a Client Component

import { useState } from 'react'; // Example of using client-side hooks

interface Item {
  id: string;
  name: string;
  isActive: boolean;
}

interface SomeClientComponentProps {
  items: Item[];
  hasItems: boolean;
  // Define the type for the Server Action passed in
  onItemAction: (id: string) => Promise<void>;
}

export const SomeClientComponent = ({ items, hasItems, onItemAction }: SomeClientComponentProps) => {
  const [feedback, setFeedback] = useState<string>('');

  const handleButtonClick = async (itemId: string) => {
    setFeedback(`Processing item ${itemId}...`);
    try {
      await onItemAction(itemId);
      setFeedback(`Action for item ${itemId} completed!`);
    } catch (error) {
      setFeedback(`Error performing action for item ${itemId}.`);
      console.error("Error calling server action:", error);
    }
  };

  if (!hasItems) {
    return <p className="text-gray-600">No active products to display.</p>;
  }

  return (
    <div>
      <ul className="space-y-2">
        {items.map(item => (
          <li key={item.id} className="p-2 border rounded flex justify-between items-center">
            <span>{item.name} (ID: {item.id})</span>
            {/* Use button from shadcn/ui if desired */}
            <button
              onClick={() => handleButtonClick(item.id)}
              className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Perform Action
            </button>
          </li>
        ))}
      </ul>
      {feedback && <p className="mt-4 text-sm text-gray-700">{feedback}</p>}
    </div>
  );
};
```

### Server & Client Components (Profile Example)

**File: `apps/bankr-fe/app/user-profile/[userId]/page.tsx`**
```tsx
// File: apps/bankr-fe/app/user-profile/[userId]/page.tsx
import { UserProfileClient } from '@/components/client/UserProfileClient';
import { CardWrapper } from '@/components/ui/wrappers/CardWrapper';

interface User {
  id: string;
  firstName: string;
  lastName: string;
  joinDate: string; // Assuming ISO string
  email: string;
}

async function fetchUserProfile(userId: string): Promise<User | null> {
  console.log(`Fetching profile for user ${userId} on the server...`);
  if (userId === '123') {
    return new Promise(resolve => setTimeout(() => resolve({
      id: '123',
      firstName: 'John',
      lastName: 'Doe',
      joinDate: new Date(Date.now() - 1000 * 60 * 60 * 24 * 30).toISOString(), // 30 days ago
      email: 'john.doe@example.com'
    }), 300));
  }
  return null;
}

interface UserProfilePageProps {
  params: { userId: string };
}

export default async function UserProfilePage({ params }: UserProfilePageProps) {
  const { userId } = params;
  const user = await fetchUserProfile(userId);

  if (!user) {
    return (
      <CardWrapper className="mt-4 text-center">
        <p className="text-red-500">User profile not found.</p>
      </CardWrapper>
    );
  }

  async function handleUpdateProfile(formData: FormData) {
    'use server';
    const firstName = formData.get('firstName') as string;
    const lastName = formData.get('lastName') as string;
    console.log(`Server Action: Updating profile for user ${userId}.`);
    console.log(`New data: First Name - ${firstName}, Last Name - ${lastName}`);
    // await db.updateUser(userId, { firstName, lastName });
    // revalidatePath(`/user-profile/${userId}`);
    return { success: true, message: 'Profile updated successfully!' };
  }

  return (
    <CardWrapper className="mt-4">
      <h1 className="text-xl font-semibold mb-4">User Profile</h1>
      <UserProfileClient
        initialUser={user}
        onUpdateProfile={handleUpdateProfile}
      />
    </CardWrapper>
  );
}

export async function generateMetadata({ params }: UserProfilePageProps) {
  const user = await fetchUserProfile(params.userId);
  if (!user) {
    return { title: 'User Not Found' };
  }
  return {
    title: `Profile of ${user.firstName} ${user.lastName}`,
    description: `View the profile information of ${user.firstName} ${user.lastName}.`,
  };
}
```

**File: `apps/bankr-fe/components/client/UserProfileClient.tsx`**
```tsx
// File: apps/bankr-fe/components/client/UserProfileClient.tsx
'use client';

import { useState, useMemo, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';

interface User {
  id: string;
  firstName: string;
  lastName: string;
  joinDate: string;
  email: string;
}

interface UserProfileClientProps {
  initialUser: User;
  onUpdateProfile: (formData: FormData) => Promise<{ success: boolean; message: string }>;
}

export const UserProfileClient = ({ initialUser, onUpdateProfile }: UserProfileClientProps) => {
  const [isEditing, setIsEditing] = useState(false);
  const [user, setUser] = useState<User>(initialUser);
  const [feedback, setFeedback] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const userDisplayName = useMemo(() => `${user.firstName} ${user.lastName}`, [user.firstName, user.lastName]);
  const formattedJoinDate = useMemo(() => new Date(user.joinDate).toLocaleDateString('en-US'), [user.joinDate]);

  const handleEditToggle = useCallback(() => {
    setIsEditing(prev => !prev);
    setFeedback(null);
  }, []);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsSubmitting(true);
    setFeedback(null);
    const formData = new FormData(event.currentTarget);
    const result = await onUpdateProfile(formData);
    if (result.success) {
      setFeedback({ type: 'success', message: result.message });
      const updatedFirstName = formData.get('firstName') as string;
      const updatedLastName = formData.get('lastName') as string;
      if (updatedFirstName && updatedLastName) {
        setUser(prev => ({ ...prev, firstName: updatedFirstName, lastName: updatedLastName }));
      }
      setIsEditing(false);
    } else {
      setFeedback({ type: 'error', message: result.message || 'Update failed.' });
    }
    setIsSubmitting(false);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setUser(prevUser => ({ ...prevUser, [name]: value }));
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{userDisplayName}</CardTitle>
        <CardDescription>Email: {user.email}</CardDescription>
      </CardHeader>
      <CardContent>
        {!isEditing ? (
          <div>
            <p>Member since: {formattedJoinDate}</p>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
              <Input id="firstName" name="firstName" type="text" value={user.firstName} onChange={handleInputChange} required className="w-full"/>
            </div>
            <div>
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
              <Input id="lastName" name="lastName" type="text" value={user.lastName} onChange={handleInputChange} required className="w-full"/>
            </div>
            <div className="flex items-center space-x-2">
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Saving...' : 'Save Changes'}
              </Button>
              <Button type="button" variant="outline" onClick={handleEditToggle} disabled={isSubmitting}>Cancel</Button>
            </div>
          </form>
        )}
        {feedback && (
          <p className={`mt-3 text-sm ${feedback.type === 'success' ? 'text-green-600' : 'text-red-600'}`}>
            {feedback.message}
          </p>
        )}
      </CardContent>
      {!isEditing && (
        <CardFooter>
          <Button onClick={handleEditToggle}>Edit Profile</Button>
        </CardFooter>
      )}
    </Card>
  );
};
```

### Layout Wrapper Components

**File: `apps/bankr-fe/app/layout.tsx`**
```tsx
// File: apps/bankr-fe/app/layout.tsx
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css'; // Global CSS file (Rule 12 - TailwindCSS base)
import { cn } from '@/lib/utils'; // classnames utility from shadcn/ui (Rule 12)
// import Header from '@/components/layout/Header';
// import Footer from '@/components/layout/Footer';

const inter = Inter({ subsets: ['latin'], variable: '--font-sans' });

export const metadata: Metadata = { // Default metadata for the entire application (Rule 27)
  title: {
    template: '%s | BankR App', // Page titles will be "Page Name | BankR App"
    default: 'BankR App', // Default title if %s is not present
  },
  description: 'A modern and convenient financial management application.',
};

interface RootLayoutProps {
  children: React.ReactNode;
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" suppressHydrationWarning> {/* Add suppressHydrationWarning if using themes with next-themes */}
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased", // Basic Tailwind classes
          inter.variable // Apply font
        )}
      >
        {/* <Header /> */}
        <div className="flex flex-col min-h-screen">
          <main className="flex-grow container mx-auto px-4 py-8">
            {children} {/* Content of page.tsx or nested layout.tsx will be rendered here */}
          </main>
        </div>
        {/* <Footer /> */}
        {/* <Toaster position="top-center" /> */}
      </body>
    </html>
  );
}
```

**File: `apps/bankr-fe/components/ui/wrappers/CardWrapper.tsx`**
```tsx
// File: apps/bankr-fe/components/ui/wrappers/CardWrapper.tsx
import { cn } from '@/lib/utils';

interface CardWrapperProps {
  children: React.ReactNode;
  className?: string;
}

export const CardWrapper = ({ children, className }: CardWrapperProps): JSX.Element => {
  return (
    <div
      className={cn(
        "rounded-lg border bg-card text-card-foreground shadow-sm p-4 md:p-6", // Adjusted padding
        className
      )}
    >
      {children}
    </div>
  );
};
```

**File: `apps/bankr-fe/components/ui/wrappers/PageWrapper.tsx`**
```tsx
// File: apps/bankr-fe/components/ui/wrappers/PageWrapper.tsx
import { cn } from '@/lib/utils';

interface PageWrapperProps {
  children: React.ReactNode;
  className?: string;
  title?: string; // Add title prop if you want to display a page title
}

export const PageWrapper = ({ children, className, title }: PageWrapperProps): JSX.Element => {
  return (
    <div className={cn("w-full", className)}>
      {title && (
        <h1 className="text-2xl md:text-3xl font-bold mb-6 md:mb-8">
          {title}
        </h1>
      )}
      {children}
    </div>
  );
};
```

### Form Components

**File: `apps/bankr-fe/components/forms/ExampleForm.tsx`**
```tsx
// File: apps/bankr-fe/components/forms/ExampleForm.tsx
'use client';

import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useState } from 'react';

const formSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }).max(50, { message: "Name must not exceed 50 characters." }),
  email: z.string().email({ message: "Invalid email address." }),
});

type FormData = z.infer<typeof formSchema>;

interface ExampleFormProps {
  onSubmit: (data: FormData) => Promise<{ success: boolean; message?: string; errors?: Record<keyof FormData, string> } | void>;
  defaultValues?: Partial<FormData>;
  submitButtonText?: string;
}

export const ExampleForm = ({
  onSubmit,
  defaultValues = {},
  submitButtonText = 'Submit'
}: ExampleFormProps): JSX.Element => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: { name: '', email: '', ...defaultValues },
  });

  const handleFormSubmit: SubmitHandler<FormData> = async (data) => {
    setIsSubmitting(true);
    setSubmitError(null);
    try {
      const result = await onSubmit(data);
      if (result && !result.success && result.message) {
        setSubmitError(result.message);
        if (result.errors) {
          (Object.keys(result.errors) as Array<keyof FormData>).forEach((key) => {
            const fieldKey = key as keyof FormData; // Cast to keyof FormData
            const message = result.errors?.[fieldKey]; // Access safely
            if (message) {
              form.setError(fieldKey, { type: 'server', message });
            }
          });
        }
      }
    } catch (error) {
      console.error("Form submission error:", error);
      setSubmitError("An error occurred while submitting the form. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Enter your name..." {...field} />
              </FormControl>
              <FormDescription>This is your public display name.</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address</FormLabel>
              <FormControl>
                <Input type="email" placeholder="email@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {submitError && (<p className="text-sm font-medium text-destructive">{submitError}</p>)}
        <Button type="submit" disabled={isSubmitting || !form.formState.isValid || form.formState.isSubmitting} className="w-full">
          {isSubmitting ? "Processing..." : submitButtonText}
        </Button>
      </form>
    </Form>
  );
};
```

**Usage with Server Action: `apps/bankr-fe/app/contact/page.tsx`**
```tsx
// File: apps/bankr-fe/app/contact/page.tsx
import { ExampleForm } from '@/components/forms/ExampleForm';
import { CardWrapper } from '@/components/ui/wrappers/CardWrapper';

interface ContactFormData { name: string; email: string; }

export default function ContactPage() {
  async function handleContactSubmit(data: ContactFormData) {
    'use server';
    console.log("Server Action: Form data received:", data);
    if (!data.name || data.name.length < 2) {
      return { success: false, message: "Invalid name from server.", errors: { name: "Name too short from server."}};
    }
    // ... more server validation and logic ...
    return { success: true, message: "Thank you for contacting us! We will respond shortly." };
  }

  return (
    <div className="max-w-md mx-auto mt-10">
      <CardWrapper>
        <h2 className="text-2xl font-semibold text-center mb-6">Contact Us</h2>
        <ExampleForm onSubmit={handleContactSubmit} submitButtonText="Send Message"/>
      </CardWrapper>
    </div>
  );
}
```

**Form with TanStack Query & Axios: `apps/bankr-fe/components/client/CreateItemFormContainer.tsx`**
```tsx
// File: apps/bankr-fe/components/client/CreateItemFormContainer.tsx
'use client';

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { ExampleForm } from '@/components/forms/ExampleForm';
import { CardWrapper } from '@/components/ui/wrappers/CardWrapper';
import axios, { AxiosError } from 'axios';

interface ItemFormData { name: string; email: string; }
interface ApiResponse {
  success: boolean;
  message?: string;
  item?: { id: string; name: string; email: string };
  errors?: Record<keyof ItemFormData, string[] | undefined>;
}

async function createItemAPIWithAxios(data: ItemFormData): Promise<ApiResponse> {
  try {
    const response = await axios.post<ApiResponse>('/api/items', data);
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      const axiosError = error as AxiosError<ApiResponse>;
      if (axiosError.response && axiosError.response.data) return axiosError.response.data;
      throw new Error(axiosError.message || "Axios request failed.");
    }
    throw error;
  }
}

export const CreateItemFormContainer = () => {
  const queryClient = useQueryClient();
  const mutation = useMutation<ApiResponse, Error, ItemFormData>({
    mutationFn: createItemAPIWithAxios,
    onSuccess: (data) => {
      if (data.success && data.item) {
        queryClient.invalidateQueries({ queryKey: ['items'] });
      }
    },
  });

  const handleFormSubmit = async (formData: ItemFormData): Promise<ApiResponse | void> => {
    try {
      return await mutation.mutateAsync(formData);
    } catch (error) {
      if (error instanceof Error) {
        const apiError = (error as any).response?.data as ApiResponse;
        if (apiError && typeof apiError.success === 'boolean') return apiError;
        return { success: false, message: error.message || "Unknown error" };
      }
      return { success: false, message: "A critical unknown error occurred." };
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10">
      <CardWrapper>
        <h2 className="text-2xl font-semibold text-center mb-6">Create New Item (Axios & TanStack Query)</h2>
        <ExampleForm onSubmit={handleFormSubmit} submitButtonText={mutation.isPending ? 'Creating...' : 'Create Item'}/>
        {mutation.isError && (<p className="mt-3 text-sm text-red-500">Mutation Error: {mutation.error?.message}</p>)}
        {mutation.isSuccess && mutation.data?.success && (<p className="mt-3 text-sm text-green-600">{mutation.data.message}</p>)}
        {mutation.isSuccess && !mutation.data?.success && (<p className="mt-3 text-sm text-red-500">{mutation.data?.message}</p>)}
      </CardWrapper>
    </div>
  );
};
```

### Custom Hooks

**File: `apps/bankr-fe/hooks/common/useToggle.ts`**
```ts
// File: apps/bankr-fe/hooks/common/useToggle.ts
'use client';

import { useState, useCallback } from 'react';

interface UseToggleResult {
  isOn: boolean;
  toggle: () => void;
  setOn: () => void;
  setOff: () => void;
}

export const useToggle = (initialValue: boolean = false): UseToggleResult => {
  const [isOn, setIsOn] = useState<boolean>(initialValue);
  const toggle = useCallback(() => setIsOn(prev => !prev), []);
  const setOn = useCallback(() => setIsOn(true), []);
  const setOff = useCallback(() => setIsOn(false), []);
  return { isOn, toggle, setOn, setOff };
};
```

**File: `apps/bankr-fe/hooks/auth/useAuthSession.ts`**
```ts
// File: apps/bankr-fe/hooks/auth/useAuthSession.ts
'use client';

import { useState, useEffect, useCallback } from 'react';

interface UserSession {
  userId: string | null;
  userName: string | null;
  isAuthenticated: boolean;
}
interface UseAuthSessionResult { session: UserSession; isLoading: boolean; logout: () => Promise<void>; }
const initialSession: UserSession = { userId: null, userName: null, isAuthenticated: false };

export const useAuthSession = (): UseAuthSessionResult => {
  const [session, setSession] = useState<UserSession>(initialSession);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  const fetchUserSession = useCallback(async () => {
    setIsLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 500)); // Simulate fetch
      const mockUser = { id: 'user123', name: 'Auth User' };
      if (Math.random() > 0.3) {
        setSession({ userId: mockUser.id, userName: mockUser.name, isAuthenticated: true });
      } else {
        setSession(initialSession);
      }
    } catch (error) {
      console.error("Failed to fetch user session:", error);
      setSession(initialSession);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => { fetchUserSession(); }, [fetchUserSession]);

  const logout = useCallback(async () => {
    setIsLoading(true);
    try {
      console.log("User logged out (simulated)");
      setSession(initialSession);
    } catch (error) { console.error("Failed to logout:", error); }
    finally { setIsLoading(false); }
  }, []);

  return { session, isLoading, logout };
};
```

### Zustand Store

**File: `apps/bankr-fe/store/useCartStore.ts`**
```ts
// File: apps/bankr-fe/store/useCartStore.ts
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

interface CartItem { id: string; name: string; price: number; quantity: number; }
interface CartState {
  items: CartItem[];
  isOpen: boolean;
  addItem: (item: Omit<CartItem, 'quantity'>, quantity?: number) => void;
  removeItem: (itemId: string) => void;
  updateItemQuantity: (itemId: string, newQuantity: number) => void;
  clearCart: () => void;
  toggleCart: () => void;
  getCartTotal: () => number;
  getTotalItems: () => number;
}

export const useCartStore = create<CartState>()(
  persist(
    (set, get) => ({
      items: [],
      isOpen: false,
      addItem: (newItemDetails, quantity = 1) => set((state) => {
        const existingItem = state.items.find((item) => item.id === newItemDetails.id);
        if (existingItem) {
          return { items: state.items.map((item) => item.id === newItemDetails.id ? { ...item, quantity: item.quantity + quantity } : item) };
        }
        return { items: [...state.items, { ...newItemDetails, quantity }] };
      }),
      removeItem: (itemId) => set((state) => ({ items: state.items.filter((item) => item.id !== itemId) })),
      updateItemQuantity: (itemId, newQuantity) => set((state) => {
        if (newQuantity <= 0) return { items: state.items.filter((item) => item.id !== itemId) };
        return { items: state.items.map((item) => item.id === itemId ? { ...item, quantity: newQuantity } : item) };
      }),
      clearCart: () => set({ items: [] }),
      toggleCart: () => set((state) => ({ isOpen: !state.isOpen })),
      getCartTotal: () => get().items.reduce((total, item) => total + item.price * item.quantity, 0),
      getTotalItems: () => get().items.reduce((total, item) => total + item.quantity, 0),
    }),
    { name: 'bankr-cart-storage', storage: createJSONStorage(() => localStorage) }
  )
);
```

### React Query with Selectors

**File: `apps/bankr-fe/hooks/data/useTransactionData.ts`**
```ts
// File: apps/bankr-fe/hooks/data/useTransactionData.ts
'use client';

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface Transaction { id: string; description: string; amount: number; currency: string; date: string; type: 'income' | 'expense'; category?: string; }
interface UserMetadata { userId: string; preferredCurrency: string; lastLogin: string; }
interface UserTransactionsResponse { transactions: Transaction[]; userMetadata: UserMetadata; totalCount: number; }

const fetchUserTransactions = async (userId: string | null, page: number = 1, limit: number = 10): Promise<UserTransactionsResponse> => {
  if (!userId) {
    console.warn("fetchUserTransactions: userId is null, returning empty state.");
    return { transactions: [], userMetadata: {} as UserMetadata, totalCount: 0 };
  }
  // const { data } = await axios.get<UserTransactionsResponse>(`/api/users/${userId}/transactions`, { params: { page, limit } });
  // return data;
  // ---- Mock API call ----
  console.log(`Fetching transactions for user ${userId}, page ${page}, limit ${limit}`);
  await new Promise(resolve => setTimeout(resolve, 700));
  const mockTransactions: Transaction[] = Array.from({ length: limit }, (_, i) => ({
    id: `txn_${userId}_${page}_${i}`, description: `Transaction ${i + 1} on page ${page}`,
    amount: Math.random() * 100000, currency: 'USD',
    date: new Date(Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 30).toISOString(),
    type: Math.random() > 0.5 ? 'income' : 'expense', category: 'General',
  }));
  const mockMetadata: UserMetadata = { userId: userId, preferredCurrency: 'USD', lastLogin: new Date().toISOString() };
  return { transactions: mockTransactions, userMetadata: mockMetadata, totalCount: 100 };
  // ---- End Mock API call ----
};

interface UseUserTransactionsOptions { userId: string | null; page?: number; limit?: number; enabled?: boolean; }

export const useUserTransactions = ({ userId, page = 1, limit = 10, enabled = true }: UseUserTransactionsOptions) => {
  return useQuery<UserTransactionsResponse, Error>({
    queryKey: ['userTransactions', userId, { page, limit }],
    queryFn: () => fetchUserTransactions(userId, page, limit),
    enabled: !!userId && enabled,
  });
};

export const useOnlyTransactionList = ({ userId, page = 1, limit = 10, enabled = true }: UseUserTransactionsOptions) => {
  return useQuery<UserTransactionsResponse, Error, Transaction[]>({
    queryKey: ['userTransactions', userId, { page, limit }],
    queryFn: () => fetchUserTransactions(userId, page, limit),
    enabled: !!userId && enabled,
    select: (data: UserTransactionsResponse) => data.transactions,
  });
};

export const useOnlyUserMetadata = ({ userId, enabled = true }: Omit<UseUserTransactionsOptions, 'page' | 'limit'>) => {
  return useQuery<UserTransactionsResponse, Error, UserMetadata>({
    queryKey: ['userTransactions', userId, { page: 1, limit: 10 }], // Using base params for shared cache
    queryFn: () => fetchUserTransactions(userId, 1, 10),
    enabled: !!userId && enabled,
    select: (data: UserTransactionsResponse) => data.userMetadata,
  });
};
```

## Examples

<example>
User: "I need to create a new page in the bankr-fe app to display a list of products fetched from the API /api/products."
Agent: "Understood. To create this page in `apps/bankr-fe/`, I will:
1.  Create a Server Component at `apps/bankr-fe/app/products/page.tsx` to fetch data from `/api/products` (Rule 21, 22).
2.  Use `next/image` for product image optimization if available (Rule 25).
3.  Define page metadata using `generateMetadata` (Rule 27).
4.  If client-side interaction is needed (e.g., an 'Add to Cart' button), I'll create a separate Client Component and pass data down from its Server Component parent. The 'Add to Cart' button will interact with the `useCartStore` Zustand store (Rule 2, 9).
Would you like me to proceed with this structure, and are there any specific UI or user interaction requirements?"
</example>

<example>
User: "Please help me create a new user registration form in clanker-fe. The form needs fields for: name, email, password, and password confirmation. Data will be submitted to a Server Action."
Agent: "Certainly. For the registration form in `apps/clanker-fe/`, I will:
1.  Create a Client Component for the form, using `react-hook-form` with `zod` for client-side validation (Rule 1, 5, 13).
2.  Input fields will use components from `shadcn/ui`.
3.  In the parent Server Component (e.g., `app/register/page.tsx`), I will define a Server Action to receive and process the form data, including server-side validation (Rule 30).
4.  This Server Action will be passed to the form's Client Component.
Do you have any additional requirements for specific validation rules or the processing flow after successful/failed registration?"
</example>

<example>
User: "I want to fetch and display the details of an article from the API `/api/articles/[id]` in bankr-fe. Just need to show the title and content."
Agent: "Okay, to display article details, I will create a Server Component at `apps/bankr-fe/app/articles/[id]/page.tsx` (Rule 22, 28).
In this component, I'll fetch data directly from the API. If you later need other parts of the article data (e.g., author, publication date) for different components, I can create a custom hook with `useQuery` and use the `select` option to optimize data retrieval (Rule 15, 16), although fetching directly in the Server Component is efficient enough for just displaying title and content.
Do you agree with this approach?"
</example>

<example>
User: "In the clanker-fe app, I need a place for users to manage their favorite items. This data needs to be stored globally and accessible from various components."
Agent: "For global favorite item management in `apps/clanker-fe/`, I recommend using Zustand (Rule 2). I will:
1.  Create a new store, e.g., `useFavoriteStore`, in the `apps/clanker-fe/store/` directory.
2.  This store will hold the state (list of favorite item IDs) and actions to add/remove favorites.
3.  If you want this list to persist across page loads, I can use Zustand's `persist` middleware to save it to localStorage.
Client Components needing to display or modify favorites will use this hook. Do you have specific requirements for the data structure of a favorite item or other actions needed in the store?"
</example>

<example type="invalid">
User: "Quickly create a component for me to display user info, fetching data from /api/user."
Agent: *Creates a Client Component, fetches data directly using useEffect and useState without leveraging Server Components or @tanstack/react-query, and without separating concerns.*
</example>

<example type="invalid">
User: "Add a simple form for users to enter their email."
Agent: *Creates the form using plain HTML <input> tags, without react-hook-form and shadcn/ui, and with no validation.*
</example>

<example type="invalid">
User: "I need a button to toggle a light/dark theme."
Agent: *Saves the theme state in React Context instead of Zustand (if the rule mandates Zustand for similar global state).*
</example>

</rewritten_file> 